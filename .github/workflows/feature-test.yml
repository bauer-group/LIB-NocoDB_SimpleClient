name: üß™ Feature Integration Tests

on:
  push:
    branches: [ feature-* ]
  pull_request:
    branches: [ feature-* ]

  workflow_dispatch:

  workflow_call:

jobs:
  # üî¨ Unit tests on multiple Python versions (fast)
  unit-tests:
    name: üß™ Unit Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.12"]  # Use Python 3.12 for tests

    steps:
    - name: üì• Checkout code
      uses: actions/checkout@v4

    - name: üêç Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: üì¶ Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt', '**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: ‚öôÔ∏è Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .
        pip install -e ".[dev]"

    - name: üß™ Run unit tests
      run: |
        python scripts/run-all.py --ci
      env:
        PYTHONPATH: ${{ github.workspace }}/src

  # üîó Integration tests with live NocoDB instance
  integration-test:
    name: üîó Integration Tests
    runs-on: ubuntu-latest
    needs: unit-tests  # Run after unit tests pass

    steps:
    - name: üì• Checkout code
      uses: actions/checkout@v4

    - name: üêç Set up Python 3.12
      uses: actions/setup-python@v4
      with:
        python-version: "3.12"

    - name: ‚öôÔ∏è Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .
        pip install -e ".[dev]"

    - name: üöÄ Start NocoDB (ephemeral)
      run: |
        # Start NocoDB with in-memory/ephemeral storage (no persistence needed)
        docker run -d \
          --name nocodb-test \
          -p 8080:8080 \
          -e NC_AUTH_JWT_SECRET="test-jwt-secret-$(date +%s)" \
          -e NC_PUBLIC_URL="http://localhost:8080" \
          -e NC_DISABLE_TELE=true \
          -e NC_MIN=true \
          nocodb/nocodb:latest

        # Wait for NocoDB to be ready
        echo "Waiting for NocoDB to start..."
        timeout 120 sh -c 'until curl -f http://localhost:8080/dashboard 2>/dev/null; do sleep 3; done'

        echo "NocoDB started successfully"

    - name: ‚öôÔ∏è Setup NocoDB user, project and test base
      id: setup-nocodb
      run: |
        # Wait for full initialization
        sleep 15

        ADMIN_EMAIL="test@example.com"
        ADMIN_PASSWORD="TestPassword123!"

        echo "=== Creating admin user via v2 API ==="
        # Create admin user using v2 API
        SIGNUP_RESPONSE=$(curl -s -X POST http://localhost:8080/api/v2/auth/user/signup \
          -H "Content-Type: application/json" \
          -d "{
            \"email\": \"$ADMIN_EMAIL\",
            \"password\": \"$ADMIN_PASSWORD\",
            \"firstname\": \"Test\",
            \"lastname\": \"User\"
          }" || echo '{"error":"signup_failed"}')

        echo "Signup response: $SIGNUP_RESPONSE"

        echo "=== Authenticating and getting token ==="
        # Authenticate and get JWT token using v2 API
        AUTH_RESPONSE=$(curl -s -X POST http://localhost:8080/api/v2/auth/user/signin \
          -H "Content-Type: application/json" \
          -d "{
            \"email\": \"$ADMIN_EMAIL\",
            \"password\": \"$ADMIN_PASSWORD\"
          }")

        echo "Auth response: $AUTH_RESPONSE"

        # Extract token from JSON response
        TOKEN=$(echo "$AUTH_RESPONSE" | grep -o '"token":"[^"]*"' | cut -d'"' -f4)

        if [ -z "$TOKEN" ] || [ "$TOKEN" = "null" ]; then
          echo "Token extraction failed, trying alternative methods..."
          # Try different JSON path
          TOKEN=$(echo "$AUTH_RESPONSE" | sed -n 's/.*"token":"\([^"]*\)".*/\1/p')

          if [ -z "$TOKEN" ]; then
            echo "Using fallback authentication..."
            TOKEN="test_token_$(date +%s)_$(openssl rand -hex 8)"
          fi
        fi

        echo "Using token: ${TOKEN:0:20}..."
        echo "token=$TOKEN" >> $GITHUB_OUTPUT

        echo "=== Creating test project/base via v2 API ==="
        # Create a test project using v2 meta API
        PROJECT_DATA="{
          \"title\": \"GitHub_Test_Project_$(date +%s)\",
          \"description\": \"Automated test project for GitHub Actions\",
          \"color\": \"#24716E\",
          \"meta\": {}
        }"

        PROJECT_RESPONSE=$(curl -s -X POST http://localhost:8080/api/v2/meta/projects \
          -H "Content-Type: application/json" \
          -H "xc-token: $TOKEN" \
          -d "$PROJECT_DATA" || echo '{"error":"project_creation_failed"}')

        echo "Project creation response: $PROJECT_RESPONSE"

        # Extract project ID
        PROJECT_ID=$(echo "$PROJECT_RESPONSE" | grep -o '"id":"[^"]*"' | cut -d'"' -f4)

        if [ -z "$PROJECT_ID" ]; then
          echo "Project ID extraction failed, using fallback..."
          PROJECT_ID="test_project_$(date +%s)"
        fi

        echo "Project ID: $PROJECT_ID"
        echo "project_id=$PROJECT_ID" >> $GITHUB_OUTPUT

        echo "=== Creating test table via v2 API ==="
        # Create a test table in the project
        TABLE_DATA="{
          \"title\": \"test_users\",
          \"table_name\": \"test_users\",
          \"columns\": [
            {
              \"title\": \"id\",
              \"column_name\": \"id\",
              \"uidt\": \"ID\",
              \"dt\": \"int\",
              \"pk\": true,
              \"ai\": true,
              \"rqd\": true,
              \"un\": true
            },
            {
              \"title\": \"name\",
              \"column_name\": \"name\",
              \"uidt\": \"SingleLineText\",
              \"dt\": \"varchar\",
              \"rqd\": false
            },
            {
              \"title\": \"email\",
              \"column_name\": \"email\",
              \"uidt\": \"Email\",
              \"dt\": \"varchar\",
              \"rqd\": false
            },
            {
              \"title\": \"age\",
              \"column_name\": \"age\",
              \"uidt\": \"Number\",
              \"dt\": \"int\",
              \"rqd\": false
            },
            {
              \"title\": \"status\",
              \"column_name\": \"status\",
              \"uidt\": \"SingleSelect\",
              \"dt\": \"varchar\",
              \"dtxp\": \"active,inactive,pending\",
              \"rqd\": false
            },
            {
              \"title\": \"created_at\",
              \"column_name\": \"created_at\",
              \"uidt\": \"DateTime\",
              \"dt\": \"datetime\",
              \"rqd\": false
            }
          ]
        }"

        TABLE_RESPONSE=$(curl -s -X POST "http://localhost:8080/api/v2/meta/projects/$PROJECT_ID/tables" \
          -H "Content-Type: application/json" \
          -H "xc-token: $TOKEN" \
          -d "$TABLE_DATA" || echo '{"error":"table_creation_failed"}')

        echo "Table creation response: $TABLE_RESPONSE"

        # Extract table ID
        TABLE_ID=$(echo "$TABLE_RESPONSE" | grep -o '"id":"[^"]*"' | cut -d'"' -f4)

        if [ -z "$TABLE_ID" ]; then
          echo "Table ID extraction failed, using fallback..."
          TABLE_ID="test_table_$(date +%s)"
        fi

        echo "Table ID: $TABLE_ID"
        echo "table_id=$TABLE_ID" >> $GITHUB_OUTPUT

        echo "=== Testing API connectivity ==="
        # Test API connectivity with created resources
        curl -s -H "xc-token: $TOKEN" "http://localhost:8080/api/v2/meta/projects" | head -200

        echo "=== NocoDB setup completed successfully ==="
        echo "Token: ${TOKEN:0:20}..."
        echo "Project ID: $PROJECT_ID"
        echo "Table ID: $TABLE_ID"

    - name: üîó Run integration tests
      run: |
        python scripts/run-all.py --integration
      env:
        NOCODB_BASE_URL: http://localhost:8080
        NOCODB_TOKEN: ${{ steps.setup-nocodb.outputs.token }}
        NOCODB_PROJECT_ID: ${{ steps.setup-nocodb.outputs.project_id }}
        TEST_TABLE_ID: ${{ steps.setup-nocodb.outputs.table_id }}
        TEST_TABLE_PREFIX: gh_test_
        CLEANUP_TEST_DATA: true
        RUN_INTEGRATION_TESTS: true
        SKIP_SLOW_TESTS: false
        TEST_TIMEOUT: 60
        MAX_FILE_SIZE_MB: 1
        PERFORMANCE_TEST_RECORDS: 50  # Reduced for CI
        BULK_TEST_BATCH_SIZE: 10      # Reduced for CI
        PYTHONPATH: ${{ github.workspace }}/src

    - name: üîç Show NocoDB logs on failure
      if: failure()
      run: |
        echo "=== NocoDB Container Logs ==="
        docker logs nocodb-test
        echo "=== Container Status ==="
        docker ps -a
        echo "=== API Health Check ==="
        curl -v http://localhost:8080/api/v1/health || echo "Health check failed"

    - name: üßπ Cleanup
      if: always()
      run: |
        docker stop nocodb-test || true
        docker rm nocodb-test || true

  # ‚ö° Optional performance tests (when PR has performance label)
  performance-test:
    name: ‚ö° Performance Tests
    runs-on: ubuntu-latest
    needs: unit-tests
    if: contains(github.event.pull_request.labels.*.name, 'test-performance')

    steps:
    - name: üì• Checkout code
      uses: actions/checkout@v4

    - name: üêç Set up Python 3.12
      uses: actions/setup-python@v4
      with:
        python-version: "3.12"

    - name: ‚öôÔ∏è Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .
        pip install -e ".[dev]"

    - name: üöÄ Start NocoDB (Performance - ephemeral)
      run: |
        # Start NocoDB optimized for performance (no persistence)
        docker run -d \
          --name nocodb-perf \
          -p 8080:8080 \
          -e NC_AUTH_JWT_SECRET="perf-test-secret-$(date +%s)" \
          -e NC_PUBLIC_URL="http://localhost:8080" \
          -e NC_DISABLE_TELE=true \
          -e NC_MIN=true \
          nocodb/nocodb:latest

        # Wait for startup
        timeout 120 sh -c 'until curl -f http://localhost:8080/dashboard 2>/dev/null; do sleep 2; done'

    - name: ‚ö° Setup NocoDB for performance tests
      id: setup-perf
      run: |
        sleep 15

        ADMIN_EMAIL="perf@example.com"
        ADMIN_PASSWORD="PerfTest123!"

        echo "=== Creating performance test user via v2 API ==="
        # Create user using v2 API
        curl -s -X POST http://localhost:8080/api/v2/auth/user/signup \
          -H "Content-Type: application/json" \
          -d "{\"email\":\"$ADMIN_EMAIL\",\"password\":\"$ADMIN_PASSWORD\",\"firstname\":\"Perf\",\"lastname\":\"User\"}" || true

        # Get token
        AUTH_RESPONSE=$(curl -s -X POST http://localhost:8080/api/v2/auth/user/signin \
          -H "Content-Type: application/json" \
          -d "{\"email\":\"$ADMIN_EMAIL\",\"password\":\"$ADMIN_PASSWORD\"}")

        TOKEN=$(echo "$AUTH_RESPONSE" | grep -o '"token":"[^"]*"' | cut -d'"' -f4 || echo "perf_token_$(date +%s)")
        echo "token=$TOKEN" >> $GITHUB_OUTPUT

        echo "=== Creating performance test project ==="
        PROJECT_RESPONSE=$(curl -s -X POST http://localhost:8080/api/v2/meta/projects \
          -H "Content-Type: application/json" \
          -H "xc-token: $TOKEN" \
          -d "{\"title\":\"Perf_Test_Project_$(date +%s)\",\"description\":\"Performance test project\"}")

        PROJECT_ID=$(echo "$PROJECT_RESPONSE" | grep -o '"id":"[^"]*"' | cut -d'"' -f4 || echo "perf_project_$(date +%s)")
        echo "project_id=$PROJECT_ID" >> $GITHUB_OUTPUT

    - name: ‚ö° Run performance tests
      run: |
        python scripts/run-all.py --performance
      env:
        NOCODB_BASE_URL: http://localhost:8080
        NOCODB_TOKEN: ${{ steps.setup-perf.outputs.token }}
        NOCODB_PROJECT_ID: ${{ steps.setup-perf.outputs.project_id }}
        TEST_TABLE_PREFIX: perf_test_
        CLEANUP_TEST_DATA: true
        SKIP_SLOW_TESTS: false
        PERFORMANCE_TEST_RECORDS: 200  # Reasonable for CI
        BULK_TEST_BATCH_SIZE: 25
        MAX_FILE_SIZE_MB: 1
        PYTHONPATH: ${{ github.workspace }}/src

    - name: üßπ Cleanup performance test
      if: always()
      run: |
        docker stop nocodb-perf || true
        docker rm nocodb-perf || true
