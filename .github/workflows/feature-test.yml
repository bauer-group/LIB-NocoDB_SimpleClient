name: 🧪 Feature Integration Tests

on:
  push:
    branches: [ feature-* ]
  pull_request:
    branches: [ feature-* ]

  workflow_dispatch:

  workflow_call:

jobs:
  # 🔬 Unit tests on multiple Python versions (fast)
  unit-tests:
    name: 🧪 Unit Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.12"]  # Use Python 3.12 for tests

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🐍 Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: 📦 Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt', '**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: ⚙️ Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .
        pip install -e ".[dev]"

    - name: 🧪 Run unit tests
      run: |
        python scripts/run-all.py --ci
      env:
        PYTHONPATH: ${{ github.workspace }}/src

  # 📦 Validate optional dependencies installation
  validate-extras:
    name: 📦 Validate Optional Dependencies
    runs-on: ubuntu-latest
    needs: unit-tests
    strategy:
      matrix:
        python-version: ["3.11", "3.12", "3.13"]
        extra: ["cli", "async", "config", "dotenv", "dev"]

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🐍 Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: 📦 Install base package
      run: |
        python -m pip install --upgrade pip
        pip install -e .

    - name: 📦 Install optional extra [${{ matrix.extra }}]
      run: |
        pip install -e ".[${{ matrix.extra }}]"

    - name: ✅ Verify installation
      run: |
        echo "=== Installed packages ==="
        pip list | grep -E "(nocodb|click|rich|aiohttp|aiofiles|pyyaml|tomli|python-dotenv)" || true

        echo "=== Testing imports ==="
        python -c "from nocodb_simple_client import NocoDBClient; print('✓ Base client imports')"

        # Test extra-specific imports
        case "${{ matrix.extra }}" in
          cli)
            python -c "import click; import rich; print('✓ CLI dependencies available')"
            python -c "from nocodb_simple_client.cli import main; print('✓ CLI module imports')"
            ;;
          async)
            python -c "import aiohttp; import aiofiles; print('✓ Async dependencies available')"
            python -c "from nocodb_simple_client.async_client import AsyncNocoDBClient; print('✓ Async client imports')"
            ;;
          config)
            python -c "import yaml; print('✓ PyYAML available')"
            if [ "${{ matrix.python-version }}" != "3.11" ] && [ "${{ matrix.python-version }}" != "3.12" ] && [ "${{ matrix.python-version }}" != "3.13" ]; then
              python -c "import tomli; print('✓ tomli available')"
            else
              python -c "import tomllib; print('✓ tomllib available (stdlib)')"
            fi
            python -c "from nocodb_simple_client.config import NocoDBConfig; from pathlib import Path; print('✓ Config module imports')"
            ;;
          dotenv)
            python -c "import dotenv; print('✓ python-dotenv available')"
            ;;
          dev)
            python -c "import pytest; import ruff; import mypy; print('✓ Dev dependencies available')"
            ;;
        esac

        echo "✅ Extra '${{ matrix.extra }}' validated successfully!"

  # 🔗 Integration tests with Python-managed NocoDB instance
  integration-test:
    name: 🔗 Integration Tests (Python-Managed)
    runs-on: ubuntu-latest
    needs: validate-extras

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🐍 Set up Python 3.12
      uses: actions/setup-python@v4
      with:
        python-version: "3.12"

    - name: ⚙️ Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .
        pip install -e ".[dev]"

    - name: 🐳 Setup NocoDB Container
      run: |
        # Make script executable
        chmod +x scripts/ci-setup.sh

        # Run setup script
        CONTAINER_NAME=nocodb-integration-test \
        NOCODB_PORT=8080 \
        NC_ADMIN_EMAIL=test@integration.local \
        NC_ADMIN_PASSWORD=IntegrationTest123 \
        ./scripts/ci-setup.sh setup

        # Verify that config files were created
        echo "=== Checking generated config files ==="
        ls -la nocodb-config.json .env.test 2>/dev/null || echo "Config files not found!"

        # Show config content (without sensitive data in logs)
        if [ -f nocodb-config.json ]; then
          echo "✅ nocodb-config.json created"
          cat nocodb-config.json | jq 'del(.NOCODB_TOKEN)' || cat nocodb-config.json
        fi

    - name: 🔗 Run integration tests
      run: |
        # Verify config files are available
        if [ ! -f nocodb-config.json ]; then
          echo "❌ ERROR: nocodb-config.json not found!"
          exit 1
        fi

        # Run tests with config file
        python -m pytest tests/test_integration.py -v --tb=short
      env:
        PYTHONPATH: ${{ github.workspace }}/src
        SKIP_INTEGRATION: 0
        # Test configuration
        TEST_TIMEOUT: 300
        MAX_FILE_SIZE_MB: 1
        CLEANUP_TEST_DATA: true

    - name: 🔍 Show Docker logs on failure
      if: failure()
      run: |
        echo "=== Available Docker containers ==="
        docker ps -a
        echo "=== Docker system info ==="
        docker system df
        echo "=== Check for NocoDB container logs ==="
        docker logs nocodb-integration-test 2>/dev/null || echo "Container not found or no logs"

    - name: 🧹 Cleanup Docker containers
      if: always()
      run: |
        # Use cleanup script
        chmod +x scripts/ci-setup.sh
        CONTAINER_NAME=nocodb-integration-test ./scripts/ci-setup.sh cleanup

  # ⚡ Optional performance tests (when PR has performance label)
  performance-test:
    name: ⚡ Performance Tests (Python-managed)
    runs-on: ubuntu-latest
    needs: unit-tests
    if: contains(github.event.pull_request.labels.*.name, 'test-performance')

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🐍 Set up Python 3.12
      uses: actions/setup-python@v4
      with:
        python-version: "3.12"

    - name: ⚙️ Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .
        pip install -e ".[dev]"

    - name: 🐳 Setup NocoDB Container
      run: |
        # Make script executable
        chmod +x scripts/ci-setup.sh

        # Run setup script with performance test configuration
        CONTAINER_NAME=nocodb-integration-test \
        NOCODB_PORT=8080 \
        NC_ADMIN_EMAIL=test@integration.local \
        NC_ADMIN_PASSWORD=IntegrationTest123 \
        ./scripts/ci-setup.sh setup
      env:
        PYTHONPATH: ${{ github.workspace }}/src

    - name: ⚡ Run Python-managed performance tests
      run: |
        python -m pytest tests/test_integration.py::TestIntegration::test_bulk_operations -v --tb=short
        python -m pytest tests/test_performance.py -v --tb=short 2>/dev/null || echo "Performance tests not available"
      env:
        PYTHONPATH: ${{ github.workspace }}/src
        SKIP_INTEGRATION: 0
        # Performance test configuration
        PERFORMANCE_TEST_RECORDS: 100
        BULK_TEST_BATCH_SIZE: 20
        TEST_TIMEOUT: 600

    - name: 🧹 Cleanup performance test containers
      if: always()
      run: |
        # Use cleanup script
        chmod +x scripts/ci-setup.sh
        CONTAINER_NAME=nocodb-integration-test ./scripts/ci-setup.sh cleanup
