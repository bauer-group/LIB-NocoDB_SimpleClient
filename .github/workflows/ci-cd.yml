name: 🚀 CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      force-security-scan:
        description: 'Force comprehensive security scan'
        type: boolean
        default: false
      skip-tests:
        description: 'Skip test execution (not recommended)'
        type: boolean
        default: false
      python-version:
        description: 'Python version to use'
        type: choice
        options:
          - '3.8'
          - '3.9'
          - '3.10'
          - '3.11'
          - '3.12'
          - '3.13'
        default: '3.12'

env:
  PYTHON_DEFAULT_VERSION: ${{ inputs.python-version || '3.12' }}
  PROJECT_NAME: 'nocodb-simple-client'
  PACKAGE_NAME: 'nocodb_simple_client'

permissions:
  contents: read
  issues: write
  pull-requests: write
  security-events: write
  packages: write

jobs:
  # Step 1: Build and Test using Python Build Module
  build-and-test:
    name: 🧪 Build & Test
    uses: bauer-group/automation-templates/.github/workflows/python-build.yml@main
    with:
      python-version: '3.12'
      project-type: 'package'
      package-manager: 'pip'
      dependency-file: 'pyproject.toml'
      build-backend: 'hatchling'
      
      # Testing Configuration
      test-enabled: ${{ !inputs.skip-tests }}
      test-framework: 'pytest'
      test-path: 'tests/'
      test-requirements: 'pytest pytest-cov'
      coverage-enabled: true
      coverage-threshold: 80
      coverage-path: 'src/nocodb_simple_client'
      
      # Code Quality
      lint-enabled: true
      lint-tool: 'ruff'
      format-enabled: true
      format-tool: 'black'
      type-check-enabled: true
      type-check-tool: 'mypy'
      type-check-path: 'src/nocodb_simple_client'
      
      # Security Scanning
      security-scan-enabled: true
      security-tools: 'bandit,safety,pip-audit'
      
      # Build Configuration
      build-enabled: true
      build-formats: 'wheel,sdist'
      
      # Matrix Testing
      matrix-enabled: true
      matrix-python-versions: '["3.8", "3.9", "3.10", "3.11", "3.12", "3.13"]'
      matrix-os: '["ubuntu-latest"]'
    secrets: inherit

  # Step 2: Security Scan Module (if enabled or forced)
  security-scan:
    name: 🔒 Security Analysis  
    if: github.event_name == 'push' || inputs.force-security-scan
    needs: build-and-test
    uses: bauer-group/automation-templates/.github/workflows/modules-security-scan.yml@main
    with:
      scan-engine: 'gitleaks'
      include-dependencies: true
      fail-on-vulnerability: true
      severity-threshold: 'medium'
      report-format: 'sarif'
    secrets: inherit

  # Step 3: License Compliance Check
  license-compliance:
    name: 📄 License Check
    needs: build-and-test
    uses: bauer-group/automation-templates/.github/workflows/modules-license-compliance.yml@main
    with:
      generate-sbom: true
      allowed-licenses: 'MIT,Apache-2.0,BSD-2-Clause,BSD-3-Clause'
      forbidden-licenses: 'GPL-3.0,AGPL-3.0'
    secrets: inherit

  # Step 4: PR Validation (only for PRs)
  pr-validation:
    name: ✅ PR Validation
    if: github.event_name == 'pull_request'
    needs: [build-and-test, security-scan, license-compliance]
    uses: bauer-group/automation-templates/.github/workflows/modules-pr-validation.yml@main
    with:
      validate-commits: true
      validate-pr-title: true
      security-check: true
      license-check: true
      size-labeling: true
    secrets: inherit

  # Step 5: Auto-labeling for PRs
  pr-labeler:
    name: 🏷️ PR Labeler
    if: github.event_name == 'pull_request'
    needs: build-and-test
    uses: bauer-group/automation-templates/.github/workflows/modules-pr-labeler.yml@main
    with:
      size-labeling: true
      type-labeling: true
      priority-labeling: false
      auto-assign: false
    secrets: inherit

  # Step 6: Package Validation (for releases)
  package-validation:
    name: 📦 Package Validation
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs: [build-and-test, security-scan, license-compliance]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: python-package
          path: dist/
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_DEFAULT_VERSION }}
      
      - name: Install validation tools
        run: |
          python -m pip install --upgrade pip
          pip install twine check-manifest
      
      - name: Validate package
        run: |
          # Check package structure
          twine check dist/*
          
          # Validate manifest
          check-manifest .
          
          # Test installation in clean environment
          pip install dist/*.whl
          python -c "import nocodb_simple_client; print('✅ Package imports successfully')"

  # Step 7: Integration Tests (optional)
  integration-tests:
    name: 🔗 Integration Tests
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs: package-validation
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.8', '3.12', '3.13']
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      
      - name: Install package
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"
      
      - name: Run integration tests
        run: |
          pytest tests/ -m integration --maxfail=5 -v
        continue-on-error: true

  # Step 8: Generate Pipeline Summary
  pipeline-summary:
    name: 📊 Pipeline Summary
    if: always()
    needs: [build-and-test, security-scan, license-compliance, pr-validation, package-validation]
    runs-on: ubuntu-latest
    steps:
      - name: Generate Summary
        run: |
          echo "# 🚀 CI/CD Pipeline Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Pipeline Results" >> $GITHUB_STEP_SUMMARY
          echo "- **Build & Test**: ${{ needs.build-and-test.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Security Scan**: ${{ needs.security-scan.result || 'skipped' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **License Check**: ${{ needs.license-compliance.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Package Validation**: ${{ needs.package-validation.result || 'skipped' }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Project Information" >> $GITHUB_STEP_SUMMARY
          echo "- **Project**: ${{ env.PROJECT_NAME }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Package**: ${{ env.PACKAGE_NAME }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Python Version**: ${{ env.PYTHON_DEFAULT_VERSION }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY

  # Step 9: Trigger Release Workflow (only on main branch)
  trigger-release:
    name: 🎯 Trigger Release Check
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' && needs.build-and-test.result == 'success'
    needs: [build-and-test, security-scan, license-compliance, package-validation]
    uses: ./.github/workflows/release.yml
    secrets: inherit